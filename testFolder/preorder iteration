#include <iostream>
#include <stack>
#include <vector>
using namespace std;
class Node{
    public:
    int data;
    Node* left;
    Node* right;
    Node(int val): data(val),left(NULL),right(NULL){}
};
vector<int> preorder_print(Node* root){
    vector<int> preorder;
    stack<Node*> Tree;
    if (root == NULL){
        return preorder;
    }
    Tree.push(root);
    while(!Tree.empty()){
        Node* node = Tree.top();
        Tree.pop();
        preorder.push_back(node->data);
        if(node->right!=NULL){
            Tree.push(node->right);
        }
        if(node->left!=NULL){
            Tree.push(node->left);
        }
    }
}
int main() {
    vector<int> output;
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(7);
    root->left->left = new Node(3);
    root->left->right = new Node(4);
    root->left->right->left = new Node(5);
    root->left->right->right = new Node(6);
    output = preorder_print(root);
    int len = output.size();
    for(int i = 0;i<len;i++){
        cout<<output[i];
    }

    return 0;
}
